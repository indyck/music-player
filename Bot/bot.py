import os
import aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import json
import logging
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
BOT_TOKEN = os.getenv("BOT_TOKEN")
SERVER_URL = os.getenv("SERVER_URL")
DEFAULT_PLAYLIST = "–õ—é–±–∏–º–æ–µ"
TIMEOUT = 30


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–∞
class PlaylistStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_audio = State()
    waiting_for_confirmation = State()
    waiting_for_delete_confirmation = State()


# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
async def fetch_playlists(user_id: int) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–ª–µ–π–ª–∏—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–µ—Ä–≤–µ—Ä–∞."""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                f"{SERVER_URL}/playlists",
                json={"user_id": user_id},
                timeout=TIMEOUT
            ) as response:
                if response.status == 200:
                    data = await response.json()
                    logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –ø–ª–µ–π–ª–∏—Å—Ç—ã –¥–ª—è user_{user_id}: {data}")
                    return data
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤: {response.status} - {await response.text()}")
                return {"playlists": [{"name": DEFAULT_PLAYLIST, "tracks": []}]}  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤: {e}")
        return {"playlists": [{"name": DEFAULT_PLAYLIST, "tracks": []}]}  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç –ø—Ä–∏ —Å–±–æ–µ

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
async def create_playlist(user_id: int, playlist_name: str) -> bool:
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –ø–ª–µ–π–ª–∏—Å—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ."""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                f"{SERVER_URL}/create_playlist",
                json={
                    "user_id": user_id,
                    "playlist": {"name": playlist_name, "tracks": []}
                },
                timeout=TIMEOUT
            ) as response:
                return response.status == 200
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞: {e}")
        return False

# –£–¥–∞–ª–µ–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
async def delete_playlist(user_id: int, playlist_name: str) -> bool:
    """–£–¥–∞–ª—è–µ—Ç –ø–ª–µ–π–ª–∏—Å—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ."""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                f"{SERVER_URL}/delete_playlist",
                json={"user_id": user_id, "playlist_name": playlist_name},
                timeout=TIMEOUT
            ) as response:
                return response.status == 200
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞: {e}")
        return False

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def update_keyboard(playlists, current_playlist=None):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
    for playlist in playlists:
        button_text = f"–í—ã–±—Ä–∞—Ç—å {playlist['name']}" if playlist['name'] != current_playlist else f"‚úì {playlist['name']}"
        keyboard.add(KeyboardButton(button_text))
    keyboard.add(KeyboardButton("–°–æ–∑–¥–∞—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç"))
    keyboard.add(KeyboardButton("–£–¥–∞–ª–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç"))
    return keyboard



async def on_startup(_):
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")



# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def start(message: types.Message, state: FSMContext):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç user_{message.from_user.id}")
    await state.reset_state()
    user_id = message.from_user.id
    
    playlists_data = await fetch_playlists(user_id)
    if not playlists_data or not playlists_data.get("playlists"):
        playlists_data = {"playlists": [{"name": DEFAULT_PLAYLIST, "tracks": []}]}
    
    await state.update_data(playlists=playlists_data, user_id=user_id, current_playlist=DEFAULT_PLAYLIST)
    playlists = playlists_data.get("playlists", [])
    keyboard = update_keyboard(playlists, DEFAULT_PLAYLIST)
    await message.reply("üéµ –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–µ–π–ª–∏—Å—Ç –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –≤ '–õ—é–±–∏–º–æ–µ':", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤
@dp.message_handler(content_types=['audio'], state='*')
async def handle_audio(message: types.Message, state: FSMContext):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –∞—É–¥–∏–æ—Ñ–∞–π–ª –æ—Ç user_{message.from_user.id}")
    try:
        audio = message.audio
        data = await state.get_data()
        user_id = data.get('user_id')
        if not user_id:
            user_id = message.from_user.id
            await state.update_data(user_id=user_id)
        current_playlist = data.get("current_playlist", DEFAULT_PLAYLIST)

        track_data = {
            "user_id": user_id,
            "file_id": audio.file_id,
            "title": audio.title or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è",
            "artist": audio.performer or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å",
            "playlist_name": current_playlist
        }
        
        file = await bot.get_file(audio.file_id)
        file_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file.file_path}"
        
        async with aiohttp.ClientSession() as session:
            async with session.get(file_url) as file_response:
                if file_response.status != 200:
                    await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª", reply_markup=await get_current_keyboard(message, state))
                    return
                file_bytes = await file_response.read()

            form_data = aiohttp.FormData()
            form_data.add_field("track_data", json.dumps(track_data), content_type="application/json")
            form_data.add_field("file", file_bytes, filename=audio.file_name or "track.mp3", content_type="audio/mpeg")

            async with session.post(
                f"{SERVER_URL}/add_track",
                data=form_data,
                timeout=TIMEOUT
            ) as response:
                if response.status != 200:
                    error_text = await response.text()
                    logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–∞: {error_text}")
                    await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {error_text}", reply_markup=await get_current_keyboard(message, state))
                    return
                response_json = await response.json()
                if response_json.get("status") != "success":
                    await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∞", reply_markup=await get_current_keyboard(message, state))
                    return
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–µ–π–ª–∏—Å—Ç—ã –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–∞
                playlists_data = await fetch_playlists(user_id)
                if not playlists_data or not playlists_data.get("playlists"):
                    playlists_data = {"playlists": [{"name": DEFAULT_PLAYLIST, "tracks": []}]}
                await state.update_data(playlists=playlists_data)
                await message.reply(
                    f"‚úÖ –¢—Ä–µ–∫ '{track_data['title']}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ '{current_playlist}'!",
                    reply_markup=update_keyboard(playlists_data.get("playlists", []), current_playlist)
                )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ: {e}")
        playlists_data = await fetch_playlists(user_id)
        if not playlists_data or not playlists_data.get("playlists"):
            playlists_data = {"playlists": [{"name": DEFAULT_PLAYLIST, "tracks": []}]}
        await state.update_data(playlists=playlists_data)
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}", reply_markup=update_keyboard(playlists_data.get("playlists", []), current_playlist))

# –í—ã–±–æ—Ä –ø–ª–µ–π–ª–∏—Å—Ç–∞
@dp.message_handler(lambda message: message.text.startswith("–í—ã–±—Ä–∞—Ç—å "))
async def select_playlist(message: types.Message, state: FSMContext):
    logger.info(f"–í—ã–±–æ—Ä –ø–ª–µ–π–ª–∏—Å—Ç–∞ –æ—Ç user_{message.from_user.id}")
    playlist_name = message.text.replace("–í—ã–±—Ä–∞—Ç—å ", "").replace("‚úì ", "")
    await state.update_data(current_playlist=playlist_name, user_id=message.from_user.id)
    playlists_data = await fetch_playlists(message.from_user.id)
    if not playlists_data or not playlists_data.get("playlists"):
        playlists_data = {"playlists": [{"name": DEFAULT_PLAYLIST, "tracks": []}]}
    await state.update_data(playlists=playlists_data)
    playlists = playlists_data.get("playlists", [])
    await message.reply(
        f"‚úÖ –í—ã–±—Ä–∞–Ω –ø–ª–µ–π–ª–∏—Å—Ç '{playlist_name}'. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è!",
        reply_markup=update_keyboard(playlists, playlist_name)
    )

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞
@dp.message_handler(lambda message: message.text == "–°–æ–∑–¥–∞—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç")
async def create_playlist_prompt(message: types.Message, state: FSMContext):
    logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –æ—Ç user_{message.from_user.id}")
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞:", reply_markup=ReplyKeyboardRemove())
    await PlaylistStates.waiting_for_name.set()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞
@dp.message_handler(state=PlaylistStates.waiting_for_name)
async def handle_playlist_name(message: types.Message, state: FSMContext):
    logger.info(f"–ù–∞–∑–≤–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –æ—Ç user_{message.from_user.id}: {message.text}")
    name = message.text.strip()
    if not name:
        await message.reply("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:", reply_markup=ReplyKeyboardRemove())
        return

    user_id = message.from_user.id
    success = await create_playlist(user_id, name)
    if success:
        playlists_data = await fetch_playlists(user_id)
        if not playlists_data or not playlists_data.get("playlists"):
            playlists_data = {"playlists": [{"name": DEFAULT_PLAYLIST, "tracks": []}]}
        playlists = playlists_data.get("playlists", [])
        await state.update_data(current_playlist=name, playlists=playlists_data)
        await message.reply(
            f"‚úÖ –ü–ª–µ–π–ª–∏—Å—Ç '{name}' —Å–æ–∑–¥–∞–Ω! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –µ–≥–æ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª:",
            reply_markup=update_keyboard(playlists, name)
        )
    else:
        await message.reply("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–∞", reply_markup=ReplyKeyboardRemove())
    
    await state.finish()

# –£–¥–∞–ª–µ–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞
@dp.message_handler(lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç")
async def delete_playlist_prompt(message: types.Message, state: FSMContext):
    logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –æ—Ç user_{message.from_user.id}")
    data = await state.get_data()
    current_playlist = data.get("current_playlist", DEFAULT_PLAYLIST)
    user_id = data.get("user_id")
    keyboard = ReplyKeyboardMarkup(
        resize_keyboard=True,
        one_time_keyboard=True,
        keyboard=[
            [KeyboardButton("–î–∞")],
            [KeyboardButton("–ù–µ—Ç")]
        ]
    )
    await message.reply(
        f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç '{current_playlist}'? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!",
        reply_markup=keyboard
    )
    await PlaylistStates.waiting_for_delete_confirmation.set()

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–∞
@dp.message_handler(lambda message: message.text == "–î–∞", state=PlaylistStates.waiting_for_delete_confirmation)
async def confirm_delete_playlist(message: types.Message, state: FSMContext):
    data = await state.get_data()
    current_playlist = data.get("current_playlist", DEFAULT_PLAYLIST)
    user_id = data.get("user_id")

    success = await delete_playlist(user_id, current_playlist)
    if success:
        playlists_data = await fetch_playlists(user_id)
        if not playlists_data or not playlists_data.get("playlists"):
            playlists_data = {"playlists": [{"name": DEFAULT_PLAYLIST, "tracks": []}]}
        playlists = playlists_data.get("playlists", [])
        new_current = playlists[0]["name"] if playlists else DEFAULT_PLAYLIST
        await state.update_data(current_playlist=new_current, playlists=playlists_data)
        await message.reply(
            f"‚úÖ –ü–ª–µ–π–ª–∏—Å—Ç '{current_playlist}' —É–¥–∞–ª–µ–Ω! –í—ã–±—Ä–∞–Ω –Ω–æ–≤—ã–π –ø–ª–µ–π–ª–∏—Å—Ç: '{new_current}'. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª!",
            reply_markup=update_keyboard(playlists, new_current)
        )
    else:
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞", reply_markup=await get_current_keyboard(message, state))
    
    await state.finish()

# –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–∞
@dp.message_handler(lambda message: message.text == "–ù–µ—Ç", state=PlaylistStates.waiting_for_delete_confirmation)
async def cancel_delete_playlist(message: types.Message, state: FSMContext):
    await message.reply("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=await get_current_keyboard(message, state))
    await state.finish()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
async def get_current_keyboard(message, state):
    data = await state.get_data()
    user_id = data.get('user_id', message.from_user.id)
    playlists_data = await fetch_playlists(user_id)
    if not playlists_data or not playlists_data.get("playlists"):
        playlists_data = {"playlists": [{"name": DEFAULT_PLAYLIST, "tracks": []}]}
    await state.update_data(playlists=playlists_data)
    playlists = playlists_data.get("playlists", [])
    current_playlist = data.get("current_playlist", DEFAULT_PLAYLIST)
    return update_keyboard(playlists, current_playlist)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)