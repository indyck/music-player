import os
import aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import json
import logging
from typing import Optional, Dict, Any
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
BOT_TOKEN = os.getenv("BOT_TOKEN")
SERVER_URL = os.getenv("SERVER_URL")
DEFAULT_PLAYLIST = "–õ—é–±–∏–º–æ–µ"
TIMEOUT = 30

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–∞
class PlaylistStates(StatesGroup):
    waiting_for_name = State()

async def fetch_playlists(user_id: int) -> Optional[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–ª–µ–π–ª–∏—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–µ—Ä–≤–µ—Ä–∞."""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                f"{SERVER_URL}/playlists",
                json={"user_id": user_id},
                timeout=TIMEOUT
            ) as response:
                if response.status == 200:
                    return await response.json()
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤: {response.status}")
                return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤: {e}")
        return None

async def create_playlist(user_id: int, playlist_name: str) -> bool:
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –ø–ª–µ–π–ª–∏—Å—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ."""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                f"{SERVER_URL}/create_playlist",
                json={
                    "user_id": user_id,
                    "playlist": {"name": playlist_name, "tracks": []}
                },
                timeout=TIMEOUT
            ) as response:
                return response.status == 200
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞: {e}")
        return False

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def on_startup(_):
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def start(message: types.Message, state: FSMContext):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç user_{message.from_user.id}")
    await state.reset_state()
    user_id = message.from_user.id
    
    playlists_data = await fetch_playlists(user_id)
    if not playlists_data:
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç—ã")
        return
    
    await state.update_data(playlists=playlists_data)
    playlists = playlists_data.get("playlists", [])
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    for i, playlist in enumerate(playlists):
        keyboard.add(InlineKeyboardButton(f"–í—ã–±—Ä–∞—Ç—å '{playlist['name']}'", callback_data=f"select_{i}"))
    keyboard.add(InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–µ–π–ª–∏—Å—Ç", callback_data="create_playlist"))
    
    sent_message = await message.reply("üéµ –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–µ–π–ª–∏—Å—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤:", reply_markup=keyboard)
    await state.update_data(message_id=sent_message.message_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤
@dp.message_handler(content_types=['audio'])
async def handle_audio(message: types.Message, state: FSMContext):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –∞—É–¥–∏–æ—Ñ–∞–π–ª –æ—Ç user_{message.from_user.id}")
    try:
        audio = message.audio
        user_id = message.from_user.id
        
        data = await state.get_data()
        playlist_name = data.get("current_playlist", "–õ—é–±–∏–º–æ–µ")
        logger.info(f"–î–æ–±–∞–≤–ª—è—é —Ç—Ä–µ–∫ –≤ '{playlist_name}' –¥–ª—è user_{user_id}")
        
        track_data = {
            "user_id": user_id,
            "file_id": audio.file_id,
            "title": audio.title or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è",
            "artist": audio.performer or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å",
            "playlist_name": playlist_name
        }
        
        file = await bot.get_file(audio.file_id)
        file_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file.file_path}"
        
        async with aiohttp.ClientSession() as session:
            async with session.get(file_url) as file_response:
                if file_response.status != 200:
                    await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª")
                    return
                file_bytes = await file_response.read()

            form_data = aiohttp.FormData()
            form_data.add_field("track_data", json.dumps(track_data), content_type="application/json")
            form_data.add_field("file", file_bytes, filename=audio.file_name or "track.mp3", content_type="audio/mpeg")

            async with session.post(
                f"{SERVER_URL}/add_track",
                data=form_data,
                timeout=aiohttp.ClientTimeout(total=30)
            ) as response:
                if response.status != 200:
                    await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {await response.text()}")
                    return
                response_json = await response.json()
                if response_json.get("status") != "success":
                    await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∞")
                    return
                await message.reply(f"‚úÖ –¢—Ä–µ–∫ '{track_data['title']}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ '{playlist_name}'!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ: {e}")
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# –í—ã–±–æ—Ä –ø–ª–µ–π–ª–∏—Å—Ç–∞
@dp.callback_query_handler(lambda c: c.data.startswith("select_"))
async def playlist_selected(callback_query: types.CallbackQuery, state: FSMContext):
    logger.info(f"Callback: {callback_query.data} –æ—Ç user_{callback_query.from_user.id}")
    await bot.answer_callback_query(callback_query.id)

    playlist_index = int(callback_query.data.split("_")[1])
    data = await state.get_data()
    playlists = data.get("playlists", {}).get("playlists", [])

    if playlist_index < len(playlists):
        selected_playlist = playlists[playlist_index]["name"]
        await state.update_data(current_playlist=selected_playlist)
        keyboard = InlineKeyboardMarkup(row_width=1)
        keyboard.add(InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç", web_app={"url": SERVER_URL}))
        keyboard.add(InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–ª–µ–π–ª–∏—Å—Ç", callback_data="back_to_select"))
        await bot.edit_message_text(
            f"‚úÖ –í—ã–±—Ä–∞–Ω –ø–ª–µ–π–ª–∏—Å—Ç '{selected_playlist}'. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ!",
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            reply_markup=keyboard
        )
    else:
        await bot.edit_message_text(
            "‚ùå –ü–ª–µ–π–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id
        )

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞
@dp.callback_query_handler(lambda c: c.data == "create_playlist")
async def create_playlist(callback_query: types.CallbackQuery):
    logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –æ—Ç user_{callback_query.from_user.id}")
    await bot.answer_callback_query(callback_query.id)
    await bot.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞:",
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id
    )
    await PlaylistStates.waiting_for_name.set()

# –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤
@dp.callback_query_handler(lambda c: c.data == "back_to_select")
async def back_to_select(callback_query: types.CallbackQuery, state: FSMContext):
    logger.info(f"–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ –æ—Ç user_{callback_query.from_user.id}")
    await bot.answer_callback_query(callback_query.id)
    await show_playlists(callback_query, state)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞
@dp.message_handler(state=PlaylistStates.waiting_for_name)
async def handle_playlist_name(message: types.Message, state: FSMContext):
    logger.info(f"–ù–∞–∑–≤–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –æ—Ç user_{message.from_user.id}: {message.text}")
    name = message.text.strip()
    if not name:
        await message.reply("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return

    user_id = message.from_user.id
    async with aiohttp.ClientSession() as session:
        async with session.post(
            f"{SERVER_URL}/create_playlist",
            json={"user_id": user_id, "playlist": {"name": name, "tracks": []}},
            timeout=aiohttp.ClientTimeout(total=30)
        ) as response:
            if response.status != 200:
                await message.reply(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {await response.text()}")
                return
            
            data = await state.get_data()
            playlists_data = data.get("playlists", {"playlists": []})
            playlists_data["playlists"].append({"name": name, "tracks": []})
            await state.update_data(playlists=playlists_data)

            playlists = playlists_data.get("playlists", [])
            keyboard = InlineKeyboardMarkup(row_width=1)
            for i, playlist in enumerate(playlists):
                keyboard.add(InlineKeyboardButton(f"–í—ã–±—Ä–∞—Ç—å '{playlist['name']}'", callback_data=f"select_{i}"))
            keyboard.add(InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–µ–π–ª–∏—Å—Ç", callback_data="create_playlist"))
            
            await bot.delete_message(chat_id=message.chat.id, message_id=data["message_id"])
            sent_message = await message.reply(f"‚úÖ –ü–ª–µ–π–ª–∏—Å—Ç '{name}' —Å–æ–∑–¥–∞–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–µ–π–ª–∏—Å—Ç:", reply_markup=keyboard)
            await state.update_data(message_id=sent_message.message_id)
    
    await state.finish()

# –ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤
async def show_playlists(obj, state: FSMContext):
    if isinstance(obj, types.CallbackQuery):
        user_id = obj.from_user.id
        message_id = obj.message.message_id
        chat_id = obj.message.chat.id
    else:
        return

    data = await state.get_data()
    playlists_data = data.get("playlists")
    if not playlists_data:
        playlists_data = await fetch_playlists(user_id)
        if not playlists_data:
            await bot.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç—ã", chat_id=chat_id, message_id=message_id)
            return
        await state.update_data(playlists=playlists_data)

    playlists = playlists_data.get("playlists", [])
    keyboard = InlineKeyboardMarkup(row_width=1)
    for i, playlist in enumerate(playlists):
        keyboard.add(InlineKeyboardButton(f"–í—ã–±—Ä–∞—Ç—å '{playlist['name']}'", callback_data=f"select_{i}"))
    keyboard.add(InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–µ–π–ª–∏—Å—Ç", callback_data="create_playlist"))
    
    await bot.edit_message_text(
        "üéµ –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–µ–π–ª–∏—Å—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤:",
        chat_id=chat_id,
        message_id=message_id,
        reply_markup=keyboard
    )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)